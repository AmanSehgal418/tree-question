/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
        static class Pair{
        TreeNode t;
        int x;
        Pair(TreeNode t,int x)
        {
            this.t=t;
            this.x=x;
        }
    }
    public ArrayList<ArrayList<Integer>> verticalOrderTraversal(TreeNode root) {
     ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer>ar=new ArrayList<Integer>();
        if(root ==null)
        {
            return ans;
        }
        TreeMap<Integer,ArrayList<Integer>>tm=new TreeMap<>();
        Queue<Pair>q=new LinkedList<Pair>();
        q.add(new Pair(root,0));
        while(!q.isEmpty())
        {
            Pair p=q.poll();
            int v=p.t.val;
            int x=p.x;
            ar=new ArrayList<Integer>();
            if(tm.containsKey(x))
            {
                ar=tm.get(x);
                ar.add(v);
            }
            else
            {
                ar.add(v);
            }
            
            tm.put(x,ar);
            if(p.t.left!=null)
            {
                q.add(new Pair(p.t.left,x-1));
            }
            if(p.t.right!=null)
            {
                q.add(new Pair(p.t.right,x+1));
            }
        }
        for(int x:tm.keySet())
        {
            ArrayList<Integer>f=tm.get(x);
            ans.add(f);
        }
        return ans;
    }
}

OR

**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Tuple {
    TreeNode node;
    int row;
    int col;
    public Tuple(TreeNode _node, int _row, int _col) {
        node = _node;
        row = _row;
        col = _col;
    }
}
class Solution {
    public static List < List < Integer >> verticalTraversal(TreeNode root) {
        TreeMap < Integer, TreeMap < Integer, PriorityQueue < Integer >>> map = new TreeMap < > ();
        Queue < Tuple > q = new LinkedList < Tuple > ();
        q.offer(new Tuple(root, 0, 0));
        while (!q.isEmpty()) {
            Tuple tuple = q.poll();
            TreeNode node = tuple.node;
            int x = tuple.row;
            int y = tuple.col;


            if (!map.containsKey(x)) {
                map.put(x, new TreeMap < > ());
            }
            if (!map.get(x).containsKey(y)) {
                map.get(x).put(y, new PriorityQueue < > ());
            }
            map.get(x).get(y).offer(node.val);

            if (node.left != null) {
                q.offer(new Tuple(node.left, x - 1, y + 1));
            }
            if (node.right != null) {
                q.offer(new Tuple(node.right, x + 1, y + 1));
            }
        }
        List < List < Integer >> list = new ArrayList < > ();
        for (TreeMap < Integer, PriorityQueue < Integer >> ys: map.values()) {
            list.add(new ArrayList < > ());
            for (PriorityQueue < Integer > nodes: ys.values()) {
                while (!nodes.isEmpty()) {
                    list.get(list.size() - 1).add(nodes.poll());
                }
            }
        }
        return list;
    }
}
