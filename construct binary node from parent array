Class Solution
{
// Function to construct binary tree from parent array.
    Node createTree(int parent[], int n)
    {
        // Create an array to store the reference
        // of all newly created nodes corresponding
        // to node value
        Node[] ref = new Node[N];
 
        // This root represent the root of the
        // newly constructed tree
        Node root = null;
 
        // Create n new tree nodes, each having
        // a value from 0 to n-1, and store them
        // in ref
        for (int i = 0; i < N; i++) {
            Node temp = new Node(i);
            ref[i] = temp;
        }
 
        // Traverse the parent array and build the tree
        for (int i = 0; i < N; i++) {
 
            // If the parent is -1, set the root
            // to the current node having
            // the value i which is stored in ref[i]
            if (parent[i] == -1) {
                root = ref[i];
            }
            else {
                // Check if the parent's left child
                // is NULL then map the left child
                // to its parent.
                if (ref[parent[i]].left == null)
                    ref[parent[i]].left = ref[i];
                else
                    ref[parent[i]].right = ref[i];
            }
        }
 
        // Return the root of the newly constructed tree
        return root;
    }
}

OR

class Solution
{
    //Function to construct binary tree from parent array.
    public static Node createTree(int parent[], int N)
    {
        if(parent.length == 0)
        return null;

        HashMap<Integer, Node> map = new HashMap<>();

        for(int i=0; i<parent.length; i++)
        {
            map.put(i, new Node(i));
        }

        Node root = null;

        for(int i=0; i<parent.length; i++)
        {
            int key = parent[i];

            if(key == -1){
                root = map.get(i);
                continue;
            }


            Node curr = map.get(key);

            if(curr.left == null)
            {
                curr.left = map.get(i);
            }else{
                curr.right = map.get(i);
            }

        }

        return root;
    }
    
}
