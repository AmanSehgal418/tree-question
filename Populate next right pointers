This solution work  for perfect tree as well as  nonperfect binary tree. 
public class Solution {
    public void connect(TreeLinkNode root) {
        Queue<TreeLinkNode> queue1 = new LinkedList<>();
        Queue<TreeLinkNode> queue2 = new LinkedList<>();
        
        if (root == null)
            return;
            
        queue1.add(root);
        TreeLinkNode node, prev = null;
        
        while (!queue1.isEmpty() || !queue2.isEmpty()) {
            
            prev = null;
            while (!queue1.isEmpty()) {
                node = queue1.remove();
                
                if (prev != null)
                    prev.next = node;
                
                prev = node;
                
                if (node.left != null)
                    queue2.add(node.left);
                
                    
                if (node.right != null)
                    queue2.add(node.right);
                
            }
            
            prev = null;
            while (!queue2.isEmpty()) {
                node = queue2.remove();
                    
                if (prev != null)
                    prev.next = node;
                
                prev = node;
                
                if (node.left != null)
                    queue1.add(node.left);

                if (node.right != null)
                    queue1.add(node.right);
            }
            
        }
        
    }
    
}

OR

public class Solution {
    public void connect(Node root) {
        if(root == null || root.left == null || root.right == null) return root;
        root.left.next = root.left;
        if(root.next != null){
          root.right.next = root.next.left;
        }
        
        connect(root.left);
        connect(root.right);
    }
    return root;
}
