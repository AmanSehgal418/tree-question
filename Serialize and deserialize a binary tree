public class Codec {
    public String serialize(TreeNode root) {
        if (root == null) return "";
        Queue<TreeNode> q = new LinkedList<>();
        StringBuilder res = new StringBuilder();
        q.add(root);
        while (!q.isEmpty()) {
            TreeNode node = q.poll();
            if (node == null) {
                res.append("n ");
                continue;
            }
            res.append(node.val + " ");
            q.add(node.left);
            q.add(node.right);
        }
        return res.toString();
    }

    public TreeNode deserialize(String data) {
        if (data == "") return null;
        Queue<TreeNode> q = new LinkedList<>();
        String[] values = data.split(" ");
        TreeNode root = new TreeNode(Integer.parseInt(values[0]));
        q.add(root);
        for (int i = 1; i < values.length; i++) {
            TreeNode parent = q.poll();
            if (!values[i].equals("n")) {
                TreeNode left = new TreeNode(Integer.parseInt(values[i]));
                parent.left = left;
                q.add(left);
            }
            if (!values[++i].equals("n")) {
                TreeNode right = new TreeNode(Integer.parseInt(values[i]));
                parent.right = right;
                q.add(right);
            }
        }
        return root;
    }
}

OR


/*Complete the given function
Node is as follows:
class Tree{
	int data;
	Tree left,right;
	Tree(int d){
		data=d;
		left=right=null;
	}
}*/



class Tree 
{
    int index;
	public void serialize(Node root, ArrayList<Integer> A) {
	    if(root == null){
	        A.add(-1);
	    }else{
	        A.add(root.data);
    	    serialize(root.left,A);
    	    serialize(root.right,A);
	    }
	}
	
    public Node deSerialize(ArrayList<Integer> A){
        if(index == A.size())
            return null;
        int val = A.get(index);
        index++;
        if(val == -1)
            return null;
        Node root = new Node(val);
        
        root.left =deSerialize(A);
        root.right=deSerialize(A);
        
        return root;
        
    }
};
