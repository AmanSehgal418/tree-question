class Tree{
        // Code here
        // Recursive helper function which will recursively update our ans list.
    // it takes root of our tree, arr list and ans list as an argument
    public static void helper(Node root, ArrayList<Integer> arr, ArrayList<ArrayList<Integer>> ans) {
        if (root == null)
            return;
        arr.add(root.data);
        if (root.left == null && root.right == null) {
            /*
             * This will be only true when the node is leaf node and hence we will update
             * our ans list by inserting list arr which have one unique path from root to leaf
             */
            ans.add(new ArrayList<Integer>(arr));
            // after that we will return since we don't want to check after leaf node
            return;
        }
        /*
         * recursively going left and right until we find the leaf and updating the arr
         * and ans list simultaneously
         */
        helper(root.left, new ArrayList<Integer>(arr), ans);
        helper(root.right, new ArrayList<Integer>(arr), ans);
    }
 
    public static ArrayList<ArrayList<Integer>> Paths(Node root) {
        /*
         * creating 2-d list in which each element is a 1-d list having one unique path
         * from root to leaf
         */
        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        /* if root is null then there is no further action require so return */
        if (root == null)
            return ans;
        ArrayList<Integer> arr = new ArrayList<Integer>();
        /*
         * arr is a list which will have one unique path from root to leaf at a time. arr
         * will be updated recursively
         */
        helper(root, arr, ans);
        /*
         * after helper function call our ans list updated with paths so we will return ans
         * list
         */
        return ans;
    }
    
    
}
