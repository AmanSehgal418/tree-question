Recursive:-
class Solution
{
    static void helper(ArrayList<Integer> res, Node root, int d){
        
        if(root == null)
        return;
        
        if(d == res.size())
          res.add(root.data);
          
        else
          res.set(d, Math.max(res.get(d), root.data));
          
        helper(res, root.left, d+1);
        helper(res, root.right, d+1);
    }
    
    
    public ArrayList<Integer> largestValues(Node root)
    {
        ArrayList<Integer> res = new ArrayList<>();
        helper(res, root, 0);
        return res;
        
    }
}

OR

level order:-

class Solution
{
    
     public ArrayList<Integer> largestValues(Node root)
    {
       ArrayList<Integer> res = new ArrayList<>();
       if (root == null) 
       return res;
       
       Queue<Node> q = new LinkedList<>();
       q.offer(root);
       
      while (!q.isEmpty()) {
          
        int n = q.size();
        int max = Integer.MIN_VALUE;
        
        for (int i = 0; i < n; i++) {
            Node temp = q.poll();
        
            max = Math.max(max, temp.data);
            
            if (temp.left != null) 
            q.offer(temp.left);
            if (temp.right != null) 
            q.offer(temp.right);
        }
        res.add(max);
    }
    return res;
 }
}
  
